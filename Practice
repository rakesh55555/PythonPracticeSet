Swap two rows
Description
Given m and n, swap the mth and nth rows of the 2-D NumPy array given below.
a = [[4 3 1]
         [5 7 0]
         [9 9 3]
         [8 2 4]]
 
Example:
Input 1:
0
2
Output 1:
[[9 9 3] 
 [5 7 0] 
 [4 3 1] 
 [8 2 4]] 

Ans - 
import numpy as np 
# Given array
a = np.array([[4, 3, 1], [5, 7, 0], [9, 9, 3], [8, 2, 4]])
# Read the values of m and n
import sys
lines = sys.stdin.readlines()
m = int(lines[0])
n = int(lines[1])

temp = a[m].copy()
a[m] = a[n]
a[n] = temp
# Print the array after swapping
print(a)

----------------------------------------------------------------------
Create border array
Description
Given a single integer n, create an (n x n) 2D array with 1 on the border and 0 on the inside.
 
Note: Make sure the array is of type int.
 
Example:
Input 1:
4
Output 1:
[[1 1 1 1]
[1 0 0 1]
[1 0 0 1]
[1 1 1 1]]
Input 2:
2
Output 2:
[[1 1] 
 [1 1]] 

Ans - 
n = int(input())
import numpy as np
array = np.zeros((n,n),dtype=int)
array[0],array[-1],array[:,0],array[:,-1]=1,1,1,1
print(array);

----------------------------------------------------------------------

Creating a 3*3 array
Description
Create a 3*3 array using list_1 = [1,2,3] list_2 = [4,5,6] list_3 = [7,8,9]
 
Ans - 
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0]
list_2 = input_list[1]
list_3 = input_list[2]
 
import numpy as np
array_1 = np.array([list_1,list_2,list_3])
 
print(array_1)

----------------------------------------------------------------------

Element Wise Multiplication
Description
Perform an element-wise multiplication using list_1 = [2,3,4,5] list_2 = [7,8,9,6] and obtain the output as a list. 
Hint: Convert the list to an array and after multiplication convert it back to a list.
 
Ans - 
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0]
list_2 = input_list[1]
 
import numpy as np
array_1 = np.array(list_1)
array_2 = np.array(list_2)
array_3 = array_1*array_2
 
print(list(array_3))
----------------------------------------------------------------------
Create NumPy Array
Description
Given an integer 'x', create an array of size m*n having all integer values equal to 'x'.
Hint: Use dtype to specify integer.
 
Format:
Input: 
Line 1: A single integer 'x'
Line 2: A single integer 'm' indicating the number of rows
Line 3: A single integer 'n' indicating the number of columns
Output: An array of size 'm*n' having all the values as 'x'
 
Ans - 
import sys
lines = sys.stdin.readlines()
int_x = int(lines[0])
rows_m = int(lines[1])
cols_n = int(lines[2])
import numpy as np
array_x = np.full((rows_m,cols_n), int_x)
print(array_x)
---------------------------------------------------------------------- 
Array 'arange' Function
Create an array of first 10 multiples of 5 using the 'arange' function.
 
Ans - 
import numpy as np
array_multipleof5 = np.arange(5, 51, 5)
print(array_multipleof5)
----------------------------------------------------------------------
Checkerboard Matrix
Description
Given an even integer ‘n’, create an ‘n*n’ checkerboard matrix with the values 0 and 1, using the tile function.
 
Format:
Input: A single even integer 'n'.
Output: An 'n*n' NumPy array in checkerboard format.
 
Example:
Input 1:
2
Output 1:
[[0 1]
 [1 0]]
Input 2:
4
Output 2:
[[0 1 0 1] 
 [1 0 1 0]
 [0 1 0 1]
 [1 0 1 0]]
 
Ans - 
import numpy as np
n = int(input())
my_arr = np.array([[0, 1], [1, 0]])
final_arr = np.tile(my_arr,(n//2,n//2))
print(final_arr)
----------------------------------------------------------------------
2D Array
Create an array using list list_1 = [10,11,12,13] and list_2 = [15,12,13,14] and print the shape and dimension of the array created.
 
Ans - 
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0]
list_2 = input_list[1]

import numpy as np
array_1 = np.array([list_1,list_2])

print(array_1.shape)
print(array_1.ndim)
----------------------------------------------------------------------
2D Array
Description
From a 2D array extract all the rows of the 2 column.
Hint: 2 column will have index value as 1.
 
Ans -
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
import numpy as np
array_2d =np.array(input_list) 
print(array_2d[:,1])
---------------------------------------------------------------------- 
Border Rows and Columns
Description
Extract all the border rows and columns from a 2-D array.
 
Format:
Input: A 2-D Python list
Output: Four NumPy arrays - First column of the input array, first row of the input array, last column of the input array, last row of the input array respectively.
 
Example:
Input 1:
[[11 12 13 14]
 [21 22 23 24]
 [31 32 33 34]]
Output 1:
[11 21 31]
[11 12 13 14]
[14 24 34]
[31 32 33 34]
 
Ans - 
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
import numpy as np
# Convert the input list to a NumPy array
array_2d =np.array(input_list)
# Extract the first column, first row, last column and last row respectively using
# appropriate indexing
print (array_2d[:,0])
print(array_2d[0,:])
print(array_2d[:,-1])
print(array_2d[-1,:])
---------------------------------------------------------------------- 
Stack Three Arrays
Description
Horizontally stack two arrays using hstack, and finally, vertically stack the resultant array with the third array.
 
Example:
Input 1:
[[1, 2],
 [5, 6]]
 
[[3, 4],
 [7, 8]]
 
[[9, 10, 11, 12]]
Output 1:
[[1 2 3 4]
 [5 6 7 8]
 [9 10 11 12]]
 
Ans - 
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0]
list_2 = input_list[1]
list_3 = input_list[2]
 
# Import NumPy
import numpy as np
 
arr1 = np.hstack((np.array(list_1),np.array(list_2)))
arr2 = np.vstack((arr1,np.array(list_3)))
print (arr2)
----------------------------------------------------------------------
Vectorize Numpy
Description
Given an array, 'array_3' divide each element with 5. 
Hint: Create a vectorized function, then apply it to the array_3.
 
Ans - 
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0:2]
list_2 = input_list[2:4]
import numpy as np
array_1 = np.array(list_1)
array_2 = np.array(list_2)
array_3 =np.hstack((array_1,array_2))
 
function = np.vectorize(lambda x : x/5)
 
print(function(array_3))
----------------------------------------------------------------------
Linear algebra
Description
Find the inverse, eigenvalues, eigenvectors, determinants of a given matrix 'array_1'.
 
Ans - 
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0]
list_2 = input_list[1]
list_3 = input_list[2]
 
import numpy as np
array_1 = np.array([list_1,list_2,list_3])
eigen =np.linalg.eig(array_1)
inv = np.linalg.inv(array_1)
det = np.linalg.det(array_1)
print(eigen)
print(inv)
print(det)
---------------------------------------------------------------------- 
Pandas Series
Description
Create a series using list = [6,7,8,9,2,3,4,5] and print the output series as the square of each number in the list.
Hint: If input series = 1,2,3 the output series should be 1,4,9
Hint: First create the series and then using apply and lambda find the output series.
 
Ans - 
import numpy as np
import pandas as pd
series_1 = pd.Series([6,7,8,9,2,3,4,5])
series_2 = series_1.apply(lambda x : x**2)
print(series_1)
print(series_2)
---------------------------------------------------------------------- 
Manual Indexing
Description
Create a panda series that contains the first ‘n’ natural numbers and their respective squares. The first ‘n’ numbers should appear in the index position.
Hint: Use manual indexing.
 
Format:
Input: A natural number 'n'
Output: A pandas series with the first 'n' natural numbers in the index position and their respective squares in the adjacent column.
 
Ans - 
 
n = int(input())
import numpy as np 
import pandas as pd 
l = []
for i in range(1,n+1):
    l.append(i)
 
s = pd.Series([x**2 for x in l],index=l)
print(s)
---------------------------------------------------------------------- 
Set Index in Dataframe
Description
Using set_index command set the column 'X' as the index of the dataset and then print the head of the dataset.
Hint: Use inplace = False 
 
Ans - 
 
import pandas as pd
df = pd.read_csv('https://query.data.world/s/vBDCsoHCytUSLKkLvq851k2b8JOCkF')
df_2 = df.set_index('X',inplace=False)
print(df_2.head())
 
----------------------------------------------------------------------

Alphabetic patterns
Description
Given a positive integer 'n' less than or equal to 26, you are required to print the below pattern 
 
Sample Input: 5 
 
Sample Output : 
--------e-------- 
------e-d-e------ 
----e-d-c-d-e---- 
--e-d-c-b-c-d-e-- 
e-d-c-b-a-b-c-d-e 
--e-d-c-b-c-d-e-- 
----e-d-c-d-e---- 
------e-d-e------ 
--------e-------- 
 
Ans - 
 
n = int(input())
alpha = 'abcdefghijklmnopqrstuvwzyz'
output = []
for i in range(n):
    s = "-".join(alpha[i:n])
    output.append(s[::-1]+s[1:])
width = len(output[0])
for i in range(n-1, 0, -1):
    print(output[i].center(width, "-"))
for i in range(n):
    print(output[i].center(width, "-"))

----------------------------------------------------------------------
Armstrong number
Description
Any number, say n is called an Armstrong number if it is equal to the sum of its digits, where each is raised to the power of number of digits in n.
For example:
153=13+53+33

Write Python code to determine whether an entered three digit number is an Armstrong number or not. 
Assume that the number entered will strictly be a three digit number.
Print "True" if it is an Armstrong number and print "False" if it is not.
Sample Input:
153
Sample Output:
True

Ans - 

num = input()
num_size = len(num)
num = int(num)
temp = num
res = 0
while temp > 0 :
    rem = temp % 10
    res += rem**num_size
    temp = temp//10
    
if res == num :
    print(True)
else:
    print(False)
    
---------------------------------------------------------------------- 
Fibonacci Series
Description
Compute and display Fibonacci series upto n terms where n is a positive integer entered by the user.
You can go here to read about Fibonacci series.
Sample Input:
5
Sample Output:
0
1
1
2
3

Ans -

n=int(input())
c,t,t1 = 0,0,1
if n <= 0 :
    print('Not a positive integer :(')
elif n == 1 :
    print(0)
else :
    print(t)
    print(t1)
    for x in range(2,n):
        nxt = t+t1
        print(nxt)
        t = t1
        t1 = nxt
        
        
----------------------------------------------------------------------
Sum of Primes
Description
Write python code to find the sum of prime numbers from 2 to n where n is a positive integer entered by the user.

Note: n can be non-prime or prime. You have to find sum of primes till n and not sum of n prime numbers. i.e. for input 10, output should be 17.

Hint: You can try using lambda functions and comprehensions to reduce the lines of code you have to write.



Input: A positive integer n.

Output: A integer denoting the sum of primes less than or equal to n



Sample Input:

5

Sample Output:

10


Ans - 

n=int(input())#find the sum of primes from 2 to n 
def is_prime(num):
   if(num == 2):
       return True
   half = num//2
   count = 2
   while count <= half:
       if num%count==0:
           return False
           break
       count +=1
   return True


sum_of_primes =0
for x in range(2,n+1):
   if is_prime(x):
       sum_of_primes = sum_of_primes+x
print(sum_of_primes)

----------------------------------------------------------------------
Generalised Chocolate
Description
Earlier you solved the chocolate problem where Sanjay had m rupees and cost of each chocolate was c rupees. Shopkeeper gave away one chocolate for three wrappers. In this problem lets generalise the question saying, Sanjay has m rupees, each chocolate costs c rupees, shopkeeper will give away k chocolates for w wrappers. Can you find now how many chocolates Sanjay will be able to eat?

Input: 4 integers separated by space in order m, c, w, k

integers c and w will be >0

integers m and k will be >=0

integer k will be <w

Output: An integer denoting number of chocolates Sanjay will be able to get.

Sample input:
15, 2, 3, 1
Sample output:
10
Explanation:

Sanjay has 15 rupees, buys 7 chocolates for 2 rupees each.

Sanjay now has 7 wrappers, exchanges 6 of them for 2 more chocolates.

Sanjay now has 3 wrappers and exchanges them for 1 more chocolate making a total of 10 chocolates
Sample input:
15, 2, 3, 2
Sample output:
17
Explanation:

Sanjay has 15 rupees, buys 7 chocolates for 2 rupees each.

Sanjay now has 7 wrappers, exchanges 6 of them for 4 more chocolates.

Sanjay now has 5 wrappers and exchanges 3 of them for 2 more chocolates.

Sanjay now has 4 wrappers and exchanges 3 of them for 2 more chocolates.

Sanjay now has 3 wrappers and exchanges them for 2 chocolates making a total of 17 chocolates.


Ans - 

import ast
inp = ast.literal_eval(input())
m = inp[0]
c = inp[1]
w = inp[2]
k = inp[3]

choc = m//c
wrap = choc
while wrap >=w :
    choc += k*(wrap//w)
    wrap = wrap%w + k*(wrap//w)
print(choc)

----------------------------------------------------------------------
Swapping
Description
You are given two integer variables,  x and y. You have to swap the values stored in x and y.

Input:
Two numbers x and y separated by a comma.

Output:
Print 5 lines. The first two lines will have values of variables shown before swapping, and the last two lines will have values of variables shown after swapping. The third line will be blank.

Sample input:
20, 50

Sample output:
x before swapping: 20
y before swapping: 50

x after swapping: 50
y after swapping: 20

Ans - 
#Take input using input()

#input() takes input in form of the string
in_string=input()

#here extract the two numbers from the string
my_list = in_string.split(',')
x= my_list[0].strip()
y= my_list[1].strip()
#print x and y before swapping
print('x before swapping: {}'.format(x))
print('y before swapping: {}\n'.format(y))
z = x
x = y
y = z
print('x after swapping: {}'.format(x))
print('y after swapping: {}'.format(y))

----------------------------------------------------------------------

Beautiful Pretty Sexy
Description
A number k is beautiful if it is of the form 3n+1, is pretty if it is of the form 3n+2 and is sexy if it is of form 3n.
Given a number k, print if it is beautiful, pretty or sexy.

Sample input:
21

Sample output:
sexy

Sample input:
22

Sample output:
beautiful

Sample input:
23

Sample output:
pretty

Ans - 

#input has been taken for you

k=int(input())

#check if the number is beautiful, pretty or sexy
rem = k%3
if rem == 0:
    print ('sexy')
elif rem == 1:
    print ('beautiful')
else:
    print ('pretty')
    
----------------------------------------------------------------------

Alarm Clock
Description
You're trying to automate your alarm clock by writing a function for it. You're given a day of the week encoded as 1=Mon, 2=Tue, ... 6=Sat, 7=Sun, and whether you are on vacation as a boolean value (a boolean object is either True or False. Google "booleans python" to get a better understanding). Based on the day and whether you're on vacation, write a function that returns a time in form of a string indicating when the alarm clock should ring. 

When not on a vacation, on weekdays, the alarm should ring at "7:00" and on the weekends (Saturday and Sunday) it should ring at "10:00". 

While on a vacation, it should ring at "10:00" on weekdays. On vacation, it should not ring on weekends, that is, it should return "off".

Input:
The input will be a list of two elements. The first element will be an integer from 1 to 7, and the second element will be a boolean value.

Output:
The output will be a string denoting the time alarm will ring or 'off'

Sample input:
[7, True]

Sample output:
off

Sample input:
[3, True]

Sample output:
10:00


Ans - 
#Take input here
#we will take input using ast sys
import ast
input_str = input()

#ast.literal_eval() will evaluate the string and make a data structure for the same
#here the input is a list since input is in '[...]', so ast.literal_eval() will
#make a list with the same data as passed
input_list = ast.literal_eval(input_str)

#the data or the two values in list is now changed to separate variables
day_of_the_week = input_list[0] #first element is an integer denoting the day of the week
is_on_vacation = input_list[1] #this is a boolean denoting if its vacation or not

def alarm_clock(dotw,iov):
    weekend = [6,7]
    if(dotw in weekend and iov):
        return 'off'
    elif((dotw not in weekend and iov) or (dotw in weekend and iov != True)):
        return '10:00'
    elif(dotw not in weekend and iov != True):
        return '7:00'

print(alarm_clock(day_of_the_week,is_on_vacation))

----------------------------------------------------------------------

Factorial
Description
Factorial is a mathematical function denoted by '!'. It is defined as

n factorial = n!= 1*2*3...*(n-1)*n

In this question, you have to make a function that will take an integer as input, and return the factorial of that integer if that integer is greater than or equal to zero and return -1 if the number is less than zero or negative.

Note: the function doesn't return print the factorial but returns it.
----------------------------------------------------------------------
Input:
An integer n

Output:
The function returns n! if n is greater than or equal to 0.
0! = 1
and the function returns -1 if the number is less than 0.

Sample input:
3

Sample output:
6

Ans - 
#take the input here
number=int(input())
#the function definition starts here
def factorial(n):
    #write the funtion here that finds and RETURNS factorial of next
    if(n == 0):
        return 1
    if(n < 0):
        return -1
    fact = 1
    for x in range(1,n+1):
        fact *= x
    return fact
#function definition ends here

#do not alter the code typed below
k=factorial(number)
print(k)

----------------------------------------------------------------------


Reverse The Digits
Description
You will be given a number. You have to reverse the digits of the number and print it.
Input:
A positive integer greater than zero

Output:
The number in reverse order. Check sample outputs for more details.

Sample input:
345200

Sample output:
2543

Ans - 
num = int(input())
#write code to reverse the number here
rev = 0
while num > 0:
    rem = num % 10
    rev = (10*rev)+rem
    num = num//10
print (rev)
----------------------------------------------------------------------

Sanjay loves chocolates. He goes to a shop to buy his favourite chocolate. There he notices there is an offer going on, upon bringing 3 wrappers of the same chocolate, you will get new chocolate for free. If Sanjay has m Rupees. How many chocolates will he be able to eat if each chocolate costs c Rupees?
Input:
Two positive integers m and c separated by a comma. The first integer is m and the second integer is c 

Output:
A single integer denoting the number of chocolates Sanjay was able to eat in total.

Sample input:
15, 2

Sample output:
10

Explanation:
First, he will get 15/2=7 chocolates. He then will return 6 wrappers for 2 chocolates. And lastly, these two wrappers and the one he previously had will get him one more chocolate, making a total of 7+2+1=10 chocolates.

Ans - 

import ast
inp = ast.literal_eval(input())
m = inp[0]
c = inp[1]
#start writing your code here
choc = m//c
wrap = choc
while wrap >=3 :
    choc += wrap//3
    wrap = (wrap%3) + (wrap//3)
print(choc)

----------------------------------------------------------------------

Print The Pattern
Description
Printing different patterns is a very good exercise to reinforce iteration through loops and strong logic building. Here you will be given a positive integer and you will generate pattern based on that integer.

Input:
A positive integer n
1 <= n <=20

Output:
A pattern as described by the Sample input and outputs below.

Sample input:
5

Sample output:
    *
   *_*
  *_*_*
 *_*_*_*
*_*_*_*_*

----------------------------------------------------------------------

n = int(input())
#start writing your code here
for i in range(1,n+1):
    for j in range(n-i):
        print(' ',end='')
    for k in range(i-1):
        print('*_',end='')
    print('*')
    
Alphabetic patterns
Description
Given a positive integer 'n' less than or equal to 26, you are required to print the below pattern 
 
Sample Input: 5 
 
Sample Output : 
--------e-------- 
------e-d-e------ 
----e-d-c-d-e---- 
--e-d-c-b-c-d-e-- 
e-d-c-b-a-b-c-d-e 
--e-d-c-b-c-d-e-- 
----e-d-c-d-e---- 
------e-d-e------ 
--------e-------- 

Ans - 

n = int(input())

alpha = 'abcdefghijklmnopqrstuvwzyz'
output = []
for i in range(n):
    s = "-".join(alpha[i:n])
    output.append(s[::-1]+s[1:])
width = len(output[0])
for i in range(n-1, 0, -1):
    print(output[i].center(width, "-"))
for i in range(n):
    print(output[i].center(width, "-"))
    
 ----------------------------------------------------------------------
 
 Armstrong number
Description
Any number, say n is called an Armstrong number if it is equal to the sum of its digits, where each is raised to the power of number of digits in n.
For example:
153=13+53+33

Write Python code to determine whether an entered three digit number is an Armstrong number or not. 
Assume that the number entered will strictly be a three digit number.
Print "True" if it is an Armstrong number and print "False" if it is not.
Sample Input:
153
Sample Output:
True

Ans - 

num = input()
num_size = len(num)
num = int(num)
temp = num
res = 0
while temp > 0 :
    rem = temp % 10
    res += rem**num_size
    temp = temp//10
    
if res == num :
    print(True)
else:
    print(False)
    
    
 ----------------------------------------------------------------------
 
 Fibonacci Series
Description
Compute and display Fibonacci series upto n terms where n is a positive integer entered by the user.
You can go here to read about Fibonacci series.
Sample Input:
5
Sample Output:
0
1
1
2
3

Ans - 

n=int(input())
c,t,t1 = 0,0,1
if n <= 0 :
    print('Not a positive integer :(')
elif n == 1 :
    print(0)
else :
    print(t)
    print(t1)
    for x in range(2,n):
        nxt = t+t1
        print(nxt)
        t = t1
        t1 = nxt
        
 ----------------------------------------------------------------------
 
 Sum of Primes
Description
Write python code to find the sum of prime numbers from 2 to n where n is a positive integer entered by the user.

Note: n can be non-prime or prime. You have to find sum of primes till n and not sum of n prime numbers. i.e. for input 10, output should be 17.

Hint: You can try using lambda functions and comprehensions to reduce the lines of code you have to write.



Input: A positive integer n.

Output: A integer denoting the sum of primes less than or equal to n



Sample Input:

5

Sample Output:

10

Ans - 

n=int(input())#find the sum of primes from 2 to n 
def is_prime(num):
   if(num == 2):
       return True
   half = num//2
   count = 2
   while count <= half:
       if num%count==0:
           return False
           break
       count +=1
   return True


sum_of_primes =0
for x in range(2,n+1):
   if is_prime(x):
       sum_of_primes = sum_of_primes+x
print(sum_of_primes)

---------------------------------------------------------------------

Smallest Element
Description
You have to find and print the smallest element of the list given as input. 

Input:
A non-empty list of integers.

Output:
The smallest integer of the input list.

Sample input:
[2, -3, 0, 7, 21]

Sample output:
-3

Ans - 
import ast
input_str = input()
input_list = ast.literal_eval(input_str)

#start writing your code here
min = input_list[0]
for x in input_list:
    if x < min:
        min = x 
print(min)
----------------------------------------------------------------------
Above Average
Description
Finding the average of the data and comparing it with other values is often encountered while analysing the data. Here you will do the same thing. The data will be provided to you in a list. You will also be given a number check.  You will return whether the number check is above average or no.

Input:
A list with two elements:
The first element will be the list of data of integers and
The second element will be an integer check.

Output:
True if check is above average and False otherwise

Sample input:
[ [2,4,6,8,10],  4]

Sample output:
False

Ans - 

#Take input here
#we will take input using ast sys
import ast
input_str = input()
input_list = ast.literal_eval(input_str)

#Remember how we took input in the Alarm clock Question in previous Session?
#Lets see if you can finish taking input on your own

data=input_list[0]
check=input_list[1]

#start writing your code to find if check is above average of data 

avg =  sum(data)/len(data)
if check > avg:
    print(True)
else :
    print(False)
----------------------------------------------------------------------
Recruit New Members
Description
Suppose you are a manager as a big firm and now are looking for new members for your team. You sent out an advertisement and have received a few applications. You have a habit of scoring people on a scale of 100. You have given scores to all the members of your team and the new applications. The process of selection is going to be very straightforward if the applicant improves the average of the team then you hire the applicant to join the team or else reject the application. Remember the order of processing applications is going to be important here.

You may see this as an extension of the previous problem, which it is. You may use the code written in the previous question as a function to improve the code quality.


Input:

Two lists on two separate lines.

The first line will have the list of scores of current team members

The second line will have the list of scores of the applicants.

Output:

The list consisting of scores of the final team after hiring from the pool of applicants.


Sample input:

[23,45,34,76]

[70,34,94]



Sample output:

[23, 45, 34, 76, 70, 94]

Ans - 

#you have to take input on your own here
import ast 
team = ast.literal_eval(input())
applicant =  ast.literal_eval(input())
#write your code here
def is_eligible(team,score):
    team_avg = sum(team)/len(team)
    if score > team_avg:
        return True
    else:
        return False

#applicant.sort(reverse=True)
for i in applicant:
    check = is_eligible(team,i)
    if check:
        team.append(i)
        
print(team)

Calendar
Description
You are planning to go to your friend's wedding and you have long events all month, lasting at least a few days. You have the start and end dates of events and your task is to find out events overlapping with the wedding date.

The code for taking input has already been written for you, please don't modify that, but do read and try to understand the way input has been taken. You will be asked to take input on your own for most of the problems here onwards. Taking data in a suitable format is an important skill for a Data Scientist.

Input:
The input will contain a list of lists where each sub-list has only two elements representing the start and end date of an event, the start date will be less than or equal to the end date. The next line of input will have a wedding date. 

Output:
The output should have the number of events overlapping with the wedding date.

Sample input:
[ [29,31], [23,26], [24,25] ]
24

Sample output:
2

Explanation:
There are three events in the month.
Event 1= from date 29 to 31
Event 2= from date 23 to 26
Event 3= from date 24 to 25
Wedding is on 24. This means it will clash with Event 3 and Event 2, that is two events. The output is therefore 2.


Ans - 

import ast
input_str1 = input()
input_list1 = ast.literal_eval(input_str1)
events = input_list1
w = int(input())
count = 0;
for i in events:
    if w >= i[0] and w<=i[1]:
       count += 1
print(count)
----------------------------------------------------------------------
Fenced Matrix
Description
You will be given two positive integers m and n. You have to make a list of lists (which can be visualised as a matrix) of size m*n, that is m sublists (rows), with each sublists having n integers (columns). The matrix should be such that it should have 1 on the border and 0 everywhere else. See sample input and output for more clarification.

Input:
Two integers separated by a space

Output:
A list of lists of size m*n printed like matrix as shown in the sample output.

Sample input:
4,5

Sample output:
[1, 1, 1, 1, 1]
[1, 0, 0, 0, 1]
[1, 0, 0, 0, 1]
[1, 1, 1, 1, 1]

Ans - 

import ast
l = ast.literal_eval(input())
m = l[0]
n = l[1]
final = [[0 for x in range(n)] for x in range(m)]
i = 0
while i < m:
    final[i][0] = 1
    final[i][n-1] = 1
    i += 1
i=0
while i < n:
    final[0][i] = 1
    final[m-1][i] = 1
    i += 1
for r in final:
    print(r)
----------------------------------------------------------------------
Lego Stack
Description
You are given a row of Lego Blocks consisting of n blocks. All the blocks given have a square base whose side length is known. You need to stack the blocks over each other and create a vertical tower. Block-1 can go over Block-2 only if sideLength(Block-2)=>sideLength(Block-1).

From the row of Lego blocks, you can only pick up either the leftmost or rightmost block.

Print "Possible" if it is possible to stack all n cubes this way or else print "Impossible".



Input Format:

The input will contain a list of n integers representing the side length of each block's base in the row starting from the leftmost.



Sample Input:

[5 ,4, 2, 1, 4 ,5]

Sample Output:

Possible

Ans - 

import ast
input_str = sys.stdin.read()
sides = ast.literal_eval(input_str)
base = max(sides[0],sides[-1])
for i in range(len(sides)):
    cur_base = max(sides[0],sides[-1])
    if(base >= cur_base) :
        if(cur_base == sides[0]) :
            base = sides.pop(0)
        elif(cur_base == sides[-1]):
            base = sides.pop(-1)  

if len(sides) == 0:
    print("Possible")
else:
    print("Impossible")
    
----------------------------------------------------------------------
Pascal's Triangle
Description
A pascal's triangle is a very interesting mathematical concept.
Each number here is a sum of the two numbers directly above it.
Following is an 8 level Pascal's triangle:﻿
You can read about Pascal's triangle here.
Your task is to print an nth level of Pascal's triangle.
The input will contain an integer n.
The output will contain 1 line of the list of numbers representing the nth row of Pascal's triangle.

Sample Input:
6
Sample Output:

[1, 5, 10, 10, 5, 1]

n=int(input())
l = []
pascal = []
for i in range(1,n+1):
    l.append([1 for x in range(i)])

for idx,x in enumerate(l):
    if(len(x) > 2):
        for k in range(1,len(x)-1):
            x[k] = pascal[idx-1][k-1]+pascal[idx-1][k] 
        x[0] = 1
        x[-1] = 1
    pascal.append(x)

print(pascal[-1])

----------------------------------------------------------------------
Break the list
Description
Write a Python program to divide a given list into chunks of size k.

The number of elements in the list need not to be divisible by k.
For example, if you want to divide the list [1,2,3,4,5,6,7] into chunk size k=4, then the first chunk will be [1,2,3,4] and the second one will have [5,6,7]. i.e. the last chunk need not have k elements.
The input will have two lines, the first line would have the list and the second line would have the value of k.(the code for taking input has already been written, you should not change that)
The final output should have the list chunks in different lines.

Sample Input:
[1,2,3,4,5,6,7,8,9]
3
Sample Output:

[1, 2, 3]
[4, 5, 6]
[7, 8, 9]

A similar question was asked in a Data Analyst test.

Ans -

import ast
input_str = input()
input_list = ast.literal_eval(input_str)
lis=input_list[0]
k=input_list[1]
def chunk(l,n):
    for x in range(0,len(l),n):
        yield l[x:n+x]
gen = chunk(lis,k)
for i in gen:
    print(i)
----------------------------------------------------------------------
Second Maximum Number in a List
Description
Given a list of numbers, find the second largest number in the list.

Note: There might be repeated numbers in the list. If there is only one number present in the list, return 'not present'.

Examples:
Input 1:
[7, 2, 0, 9, -1, 8]
Output 1:
8

Input 2:
[3, 1, 4, 4, 5, 5, 5, 0, 2, 2]
Output 2:
4

Input 2:
[6, 6, 6, 6, 6]
Output 2:
not present

Ans - 

import ast
input_str = input()
input_list = ast.literal_eval(input_str)
l = list(set(input_list))
l.sort(reverse=True)
if(len(l) <= 1):
    print('not present')
else:
    print(l[1])



----------------------------------------------------------------------

Pattern Printing
Description
Given a positive integer n. Print the pattern as shown in sample outputs.

A code has already been provided. You have to understand the logic of the code on your own and try and make changes to the code so that it gives correct output.



Input: A positive integer n

1<= n <=9



Output: Pattern as shown in examples below





Sample input:

4



Sample output:

4444444

4333334

4322234

4321234

4322234

4333334

4444444



Sample input:

5



Sample output:

555555555

544444445

543333345

543222345

543212345

543222345

543333345

544444445

555555555


Ans - 

#input n taken here
n=int(input())

#we will make a list of lists with just [1] in it. We will run a for loop from i= 2 to n and in each iteration
#we will add [i]*(2i-3) in top of the list and and in bottom
#then add i on both sides of all sub_lists 

answer=[[1]]
for i in range(2, n+1):
    t=[i]*((2*i)-3)
    answer.insert(0, t)
    answer.append(t)
    for idx,a in enumerate(answer):
        temp = a.copy()
        temp.insert(0,i)
        temp.append(i)
        answer[idx] = temp

answerfinal=[]
#we join the elements of the string without space
for a in answer:
    answerfinal.append("".join(str(x) for x in a))
#print 
for a in answerfinal:
    print(a)



----------------------------------------------------------------------
Palindrome String
Description
Write a program to check whether a string is a palindrome or not. Print 1 if the string is a palindrome and 0 otherwise.

Note: Please ensure that your program should not be case-sensitive. So, if the input is, say, “HAnnah”, then, its output should be 1.

Input:
A string

Output:
1 if the string is a palindrome, 0 otherwise

Sample input:
HAnnah

Sample output:
1

Ans - 
s = str(input())
#check for palindrome here
s = s.lower()
if(s == s[::-1]) :
    print(1)
else:
    print(0)


----------------------------------------------------------------------
Reverse Words
Description
You will be given a sentence in the form of a string. You have to reverse the order of the words in the sentence. Remember not to reverse the individual words, but the order of words. Check the sample input-output for further clarification.

Input:
A string, which will consist of a few spaces.

Output:
The words in reverse order.

Sample input:
I love coding in python

Sample output:
python in coding love I

Ans - 

sentence=input()

#reverse the words of the sentence here
s_list = sentence.split(' ')
rev = ''
for x in s_list[::-1]:
    rev = rev + ' ' + x
rev = rev.strip()  
print(rev)


----------------------------------------------------------------------
No Spaces
Description
While naming entities, it is a common practice to avoid spaces. That is the reason you see so many people using underscores instead of spaces. 
You will be given a string, containing a few spaces and random upper and lower cases. You have to write a code that will add underscore in place of spaces and also capitalise the letters properly, i.e. the first letter after underscore should be in upper case and the first letter of the string should be in upper case, all of the other letters should be lower case. 
This type of activity is frequently encountered while starting to analyse data. This is called Data cleaning and you will learn more about it in upcoming modules.

Input:
A string of only alphabets and spaces

Output:
A string formatted as stated above. See sample input/output for more clarification,


Sample input:
caloRie consuMed

Sample output:
Calorie_Consumed

Ans - 

s=input()
#write code to format the string s as asked 
s = s.lower()
sl = s.split(' ')
sl_up = [x[0].upper()+ x[1:] for x in sl]
print('_'.join(sl_up))


----------------------------------------------------------------------
Shift Vowels
Description
Write a program that receives a string and shifts all the vowels present in it to the beginning. Output the resultant string. The order of all the vowels with respect to each other as well as the order of all the other characters with respect to each other should stay the same.

Input:
A string

Output:
Vowels shifted to the beginning in the input string.

Sample input:
programming

Sample output:
oaiprgrmmng

Ans - 

s = input()
vowel = 'aeiouAEIOU'
v = ''
c = ''
for x in s:
    if x in vowel:
        v = v+x
    else:
        c = c+x
print(v+c)




----------------------------------------------------------------------

Common Prefix
Description
You will be given two strings. You have to find the largest prefix common in both the strings.
Input:
Two lines of input, one string on each line

Output:
The common largest prefix for both strings. Check sample input/output for clarification. -1 if no prefix is common.

Sample input:
abshdksajd
abshiehand

Sample output:
absh

Ans - 
string1=input().lower()
string2=input().lower()
#start writing your code to find largest common prefix here
minlen = min(len(string1),len(string2))
complete = True
for i in range(minlen):
    if(string1[i] != string2[i]):
        complete = False
        break;

if complete:
    i = minlen
if i==0:
    print(-1)
else:
    print(string1[:i])


----------------------------------------------------------------------
Anagrams
Description
Two strings are anagrams of each other if you can rearrange the characters of one string to make the other string.
Given two strings, can you find if they are anagrams or no?

Input:
Two lines of input, each line will contain a string without space.

Output:
True or False based on whether the strings are anagrams or not.

Sample input:
thing
night

Sample output:
True
Ans -
s1 = input()
s2 = input()
#code here to check if they are anagrams or no
anagram = True
if len(s1) != len(s2):
    print(False)
else:
    for c in s1:
        if(s1.count(c) != s2.count(c)):
            anagram = False
    print(anagram)
----------------------------------------------------------------------

Find Extra Character
Description
Given two strings, one of the strings will contain an extra character. Find the extra character. The number of all the other characters in both the strings will be the same. Check the sample input/output for more clarification.

The code will be case sensitive.

Input:
Two strings on two separate lines. 

Output:
One Character which is extra in one of the strings

Sample input:
abcd
cedab

Sample output:
e

Ans - 
s1 = input()
s2 = input()
#write code to find the extra character here
maxstr = max([s1,s2],key=len)
minstr = min([s1,s2],key=len)
ex =''
for c in maxstr:
    if c not in minstr or minstr.count(c) != maxstr.count(c):
       ex=c
print(ex)



----------------------------------------------------------------------
Integer or String
Description
You have been using ast.literal_eval() to take input in a suitable format. Have you thought of how does it distinguish between different data types and data structures? We will solve a similar but smaller problem here. You will be given a string as input. You just have to determine if the string can be an integer or no?
This is also encountered a lot in Data Science. Upon taking a lot of data, sometimes integer values are treated as a string, and due to that a lot of functionalities of integer data which you will learn ahead are rendered useless.

Input:
A single line of string

Output:
INT if the input string is an integer and STR otherwise.

Sample input:
12

Sample output:
INT

Ans - 
in_str=input()

#find out if in_str is integer or not
def is_int(s):
    try:
        int(s)
        return 'INT'
    except:
        return 'STR'

print(is_int(in_str)) 

----------------------------------------------------------------------

Clean Numbers
Description
While extracting data from different sources, often numeric values come in string format and with commas like 1,000 or 23,321 and also sometimes with spaces in start and beginning of the string. For simplicity, we will consider only integer values imbedded with commas. You will take the input and print the cleaned integer without commas and spaces.

Input:
One line input of string, it will consist of only spaces commas and digits

Output:
Cleaned number

Sample input:3,213
Sample output:
3213

Ans - value=input()

#start writing your code from here
value = value.strip()
n_list = [i for i in value if i.isdigit()]
num = ''.join(n_list)
print(num)

----------------------------------------------------------------------
Secret Message
Description
You write all your passwords in a diary so that you don't forget them. But clearly this is too risky, so you came up with a simple plan, you will simply write it by shifting all the alphabets by a certain step. For eg: if you decide your step to be 3, then 'a' will become 'd', and 'k' will become 'n' and so for all alphabets. The last alphabets will simply circle back to 'a'. In this case, 'y' will become 'b' and so on. Now you just have to remember the step size, can then you can check the password anytime you want. You decided to write code to do this, now that you have learned coding in python. Your code will take in the step size and what is written in the diary and give out the real password.


Input:

A list of two elements.

The first element will be a string consisting of only alphabets which is taken from the diary and the second element will be the step size.


Output:

A string denoting the password


Sample input:

['ytKveh', 4]



Sample output:

upGrad

Ans - 

#take input on your own
import ast
inp = ast.literal_eval(input())
strng = inp[0]
key = inp[1]
#start writing your code from here
if key > 26 or key < -26:
    key = key%26
res = ''
for i in strng:
    a = ord(i)
    if i.isupper():
        if a-key < ord('A'):
            res += chr(a+(26-key))
        elif a-key > ord('Z'):
            res += chr(a-(26+key))
        else :
            res += chr(a-key)
                       
    elif i.islower():
        if a-key < ord('a'):
            res += chr(a+(26-key))
        elif a-key > ord('z'):
            res += chr(a-(26+key))
        else :
            res += chr(a-key)
    else :
        res += i
                    
print (res)

----------------------------------------------------------------------
A weird sum
Description
Write a program that computes the value of n+nn+nnn+nnnn+... nn...n ntimes with a given number as the value of n.

For example, if n=3 , then you have to find the value of 3+33+333

if n=10, then you have to find the value of 10 + 1010 + 101010 + 10101010 + 1010101010 + 101010101010 + 10101010101010 + 1010101010101010 +101010101010101010+ 10101010101010101010

Note: n will always be a positive number

Ans - 
n=int(input())

#start writing your code here
total = 0
for i in range(1,n+1):
    num = i*str(n)
    total += int(num)
print(total)
----------------------------------------------------------------------
Remove Duplicates
Description
Sometimes the data has few duplicate values which will affect the analysis done. In this problem, you will be given a list. You have to find and delete the duplicates and print the updated list with no duplicates.

Input:
A list of integers.

Output:
A list of integers, with duplicates removed if any.


Sample input:
[8, 9, 2, 2, 3, 4, 5, 2]

Sample output:
[8, 9, 2, 3, 4, 5]

Ans -

import ast 
l = ast.literal_eval(input())
#remove duplicates from the list
res = {}
for i in l:
    res.setdefault(i,1)
#print the list without duplicates
print(list(res.keys()))

----------------------------------------------------------------------
Dictionary And List
Description
You will be converting a dictionary, of string(keys) and list of string (values),  to a list of strings. Please check the sample input/output for clarification.


Input:
A dictionary with keys as strings and values as a list of strings.

Output:
A list of strings


Sample input:
{‘Mobile’: [‘Redmi’, ‘Samsung’, ‘Realme’], 
‘Laptop’: [‘Dell’, ‘HP’],
‘TV’: [‘Videocon’, ‘Sony’] }

Sample output:
[‘Mobile_Redmi’, ‘Mobile_Samsung’, ‘Mobile_Realme’, ‘Laptop_Dell’, ‘Laptop_HP’, ‘TV_Videocon’, ‘TV_Sony’]


Sample input:
{ 'Pen': ['Gel', 'Ink', 'ball'],
'Mobile': ['Android', 'apple'] }

Sample output:
['Pen_Gel', 'Pen_Ink', 'Pen_ball', 'Mobile_Android', 'Mobile_apple']

Ans - 
#input has been taken for you
import ast
input_str = input()
#input dictionary has been received in input_dict
input_dict = ast.literal_eval(input_str)


#start writing your code here
l =[]
for i in input_dict.keys():
    for j in input_dict[i]:
        l.append(i+'_'+j)
        
print(l)
----------------------------------------------------------------------
upGrad String
Description
For the purpose of this question, we will define something called an upGrad string. Note that this definition is not valid outside this question. A string upGrad string if the frequency of its characters is something like 1, 2, 3, 4, .... That is a character appears only once, another appears twice, another appears thrice and so on. For example string '$yrr$ssrsr' is a beautiful string since the frequency of y:1, $:2, s:3, r:4, however string '$yrr$ssrsr%' will not be beautiful since it has two characters (y and %) with frequency 1. The frequency of characters should be of form 1, 2, 3, 4, 5... only.
Given a string, can you determine if the string is upGrad string or no?


Input:
A string

Output:
Boolean depending whether the string is upGrad string or not


Sample input:
$yrr$ssrsr

Sample output:
True

Ans- 

#input has been taken for you
s=input()

#start writing your code to check if s is upgrad string or no
res = {}
for i in s:
    if i in res:
        res[i] += 1
    else: 
        res[i] = 1
vals = list(res.values())
flag  = True
for j in range(1,len(res)+1):
    if (j not in vals) or (vals.count(j) > 1):
        flag = False
        break
print(flag)
Balanced Brackets
Description
You will be given a string with a lot of brackets. You have to print if the brackets are balanced or not. Remember, there are three types of brackets: ‘( )’,  ‘{ }’ and ‘[ ]’.

Input:
A string

Output:
Yes, if the brackets are balanced.
No otherwise.

Sample input:
){[[]]}())()

Sample output:
No

Ans - 

#take input
inp=input()
open_para = ["[","{","("] 
close_para = ["]","}",")"]
stack = []
flag = True
for i in inp:
    if i in open_para:
        stack.append(i)
    elif i in close_para:
        idx = close_para.index(i)
        if (len(stack)>0) and open_para[idx] == stack[len(stack)-1]:
            stack.pop()
        else:
            flag = False
            break
if len(stack) == 0:
    flag = True
    
if(flag):
    print('Yes')
else:
    print('No')


----------------------------------------------------------------------
Cheapest Item
Description
You will be given a dictionary with keys as items and values as their prices. You have to print the cheapest item. 


Sample input:
A single line non-empty dictionary

Sample output:
cheapest_item name: cheapest_item_cost

Sample input:
{'mobile1':10000, 'mobile2':11000, 'mobile3':13000, 'mobile4':9000, 'mobile5':15000, 'mobile6':16000, 'mobile7':17000, 'mobile8':18000, 'mobile9':19000}

Sample output:
mobile4: 9000

Note: in case of a tie, whichever item came first should be the output.

Ans - 

#take input here
import ast 
inp = ast.literal_eval(input())

#start writing your code here
price = list(inp.values())
items = list(inp.keys())
min_price = min(price)
idx = price.index(min_price)
print(items[idx]+': '+str(inp[items[idx]]))

----------------------------------------------------------------------
Maximum Distance
Description
You will be given a list of repeated elements. You have to find the maximum distance between two same elements. The answer will be zero if there are no repeated elements.

Input:
A non-empty list of integers.

Output:
A single integer denoting the maximum distance between two same integers.

Sample input:
[1, 2, 3, 2, 5, 1, 2, 4, 6, 2, 7, 8, 6]

Sample output:
8

Explanation:
Max distance for 1: 5
Max distance for 2: 8
Max distance for 3: 0
Max distance for 4: 0
Max distance for 5: 0
Max distance for 6: 4
Max distance for 7: 0
Max distance for 8: 0

Ans - 

import ast
l= ast.literal_eval(input())
#start writing your code from here
dis ={}
for i in range(len(l)):
    for k in range(i,len(l)):
        if(l[i] == l[k]):
            dis[l[i]] = k - l.index(l[i])
            
print(max(list(dis.values())))
----------------------------------------------------------------------
Vote for Food
Description
Your team is going for camping and you are taking a vote to decide what food to pack for dinner.
Everyone gets a vote and the food item that gets at least one more than half of the votes wins. None of the items wins if nothing gets at least one more than half votes. Assume that every person gets only one vote.
The input will contain a list of food items where each occurrence of an item represents one vote. You should print the winning food item as output. If there is no clear winner, print "NOTA". 

Sample Input:
["pasta","pasta","pasta","pasta","pasta","paratha","paratha","paratha"]
Sample Output:
pasta

This question was asked in a Data Analyst interview.

Ans - 

import ast,sys
input_str = sys.stdin.read()
l = ast.literal_eval(input_str)
l_set = set(l)
res = {}
for i in l_set:
    res[i] = l.count(i)
nota = True   
for item,vote in res.items():
    if vote > (len(l)//2):
        print(item)
        nota = False
        break
if(nota):
    print('NOTA')
----------------------------------------------------------------------
Flatten a dictionary
Description
Consider a nested dictionary as follows:

{'Fruit': 1, 'Vegetable': {'Cabbage': 2, 'Cauliflower': 3}, 'Spices': 4}

Your task is to flatten a nested dictionary and join the nested keys with the "_" character. For the above dictionary, the flattened dictionary would be as follows:

{'Fruit': 1, 'Vegetable_Cabbage': 2, 'Vegetable_Cauliflower': 3, 'Spices': 4}



The input will have a nested dictionary.

The output should have two lists. The first list will have keys and the second list should have values. Both lists should be sorted.

Sample Input:

{'Fruit': 1, 'Vegetable': {'Cabbage': 2, 'Cauliflower': 3}, 'Spices': 4}

Sample Output:

['Fruit', 'Spices', 'Vegetable_Cabbage', 'Vegetable_Cauliflower']
[1, 2, 3, 4]

Ans - 

import ast,sys
input_str = sys.stdin.read()
input_dict = dict(ast.literal_eval(input_str))
def flatten_dict(dd, separator='_', prefix=''):
    #complete this function
    res = {}
    for item,value in dd.items():
        if isinstance(value,dict):
            for i,v in value.items():
                res[item+separator+i] = v
                
        else:
            res[item] = value
    
    return res;
            

out1=list(flatten_dict(input_dict).keys())
out2=list(flatten_dict(input_dict).values())
out1.sort()
out2.sort()
print(out1)
print(out2)
----------------------------------------------------------------------
Searching Element
Description
Searching a particular data entry from a big chunk a task you will encounter frequently.  In this question, you will be given a list of integers and a key element that you will have to find in the list. You will return the index or location of the key in the list or -1 if it is not present.

Input:
Two lines of input. The first line contains a list of integers, the second line contains an integer key that you have to find in the list

Output:
The index of the first occurrence of the key in the provided list, if it is present, and -1 otherwise.

Sample input:
[1, 2, 4, 2, 3, 2, 3, 3, 6, 7]
3

Sample output:
4

Explanation:
The first occurrence of the key 3 is at index 4.


Ans - 

#take input here
import ast 
data_list= ast.literal_eval(input())
key= int(input())

#find the index of the key in data_list here
idx = -1
for i,val in enumerate(data_list):
    if(key == val):
        idx = i;
        break
        
print(idx)
----------------------------------------------------------------------
Binary Search
Description
You heard Sajan talk about a faster search method when the list we have is sorted. This is a much faster approach as the data you will normally deal with will have tens of thousands of entries, having a search algorithm what is faster will save a lot of computation power and will be faster.
You can try your code here.

Input:
Two lines of input will be provided. The first line will have a sorted list with no repeated values, while the second line will have a key whose occurrence you have to find in the list.

Output:
Index of the key in the given list if it is present, else -1.

Sample input:
[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]
17

Sample output:
7


Ans - 

#take input here
import ast
sorted_list= ast.literal_eval(input())
key=int(input())

#find the index of key in list
def bin_search(data,key):
    l = 0
    r = len(data)-1
    while(l<=r):
        mid = (l+r)//2
        if(data[mid] == key):
            return mid;
        elif data[mid] < key:
            l = mid+1
        else:
            r = mid-1
    return -1
    
print(bin_search(sorted_list,key))
            

----------------------------------------------------------------------
Rotated List
Description
To make the question a little more difficult, the sorted list with no repeated values is first 'rotated' and then passed as input. Everything else remains the same.
Rotation of list is done by first selecting the pivot around which the list is then rotated. For eg- the sorted list is [10, 20, 30, 40, 50, 60, 70] and the pivot of rotation is index 2 (that is value 30) then the rotated list will look like [40, 50, 60, 70, 10, 20, 30]

Input:
Two lines of input, the first line contains a rotated list atmost once, and the second line contains a key that you have to find in the list.

Note: The list can be rotated about the last element, meaning the list will remain sorted.

Output:
Index of the key in the rotated list if it is present, else -1.

Sample input:
[15, 16, 17, 18, 11, 12, 13, 14]
12

Sample output:
5

Sample input:
[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]
17

Sample output:
7

Ans -

#take input on your own
import ast 
rotated_list= ast.literal_eval(input())
key=int(input())

#find key in rotated list
def rotated_list_search(data,key):
    l = 0
    r = len(data)-1
    while(l<=r):
        mid = (l+r)//2
        if(data[mid] == key):
            return mid;
        elif data[l] < data[mid]:
            if key > data[l] and key < data[mid] :
                r = mid-1
            else :
                l = mid+1
        elif data[l] > data[mid]:
            if key < data[r] and key > data[mid]:
                l = mid+1 
            else:
                r = mid-1
    return -1
        
print(rotated_list_search(rotated_list,key))

----------------------------------------------------------------------
Square Root
Description
You will be given a positive integer n, you have to use binary search and find the square root of n.

Input:
A single positive integer n.
0<n<=10000

Output:
The square root of n, accurate up to 4 decimal places.

Hint: you may find round() function useful here.v

Sample input:
5

Sample output:
2.2361

Explanation:
The square root of 5 is 2.236067977..., upon rounding off to 4 decimals, we get 2.2361

Ans - 

#input has been taken for you

n=int(input())

#find square root of n here
def squareroot(number): 

    l = 0
    r = number
    while abs(l-r) > 10 ** -5 : 
        mid = (l+r)/2
        if mid ** 2 > number : 
            r = mid
        else : 
            l = mid
    return round(mid,4)
    
print(format(squareroot(n),'.4f')) 

----------------------------------------------------------------------
Ternary Search
Description
In the binary search, you kept reducing the search space into half of the previous search space. In this question, can you similarly reduce the search space in one-third of the last space search and write a searching algorithm?

Input:
A non-empty sorted list of unique integers in line one
The integer key to be found in line two

Output:
Index of the element key if it is present in the list, else -1

Sample input:
[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]
17

Sample output:
7

Ans - 

#take input here
import ast 
data = ast.literal_eval(input())
key = int(input())

#start writing your code from here
def ternarysearch(data,k):
    l = 0
    r = len(data) - 1
    while l <= r:
        mid1 = l + (r - l) // 3
        mid2 = l + 2 * (r - l) // 3
        if k == data[l]:
            return l
        elif k == data[r]:
            return r
        elif k < data[l] or k > data[r]:
            return -1
        elif k <= data[mid1]:
            r = mid1
        elif k > data[mid1] and k <= data[mid2]:
            l = mid1 + 1
            r = mid2
        else:
            l = mid2 + 1
    return -1
print(ternarysearch(data,key))

----------------------------------------------------------------------
Finding Root
Description
When finding out square root, you indirectly solved the problem x2=num for x. You can use the same technique to find roots of other complex functions as well. In this problem, you are asked to solve the equation nx+x=0, where n will be a positive input integer.
You are to find a solution accurate up to 6 decimal places.

Input:
Positive integer n
1<= n <= 1000

Output:
value of x that satisfies the given equation accurate upto 6 decimal places

Sample input:
1

Sample output:
-1.000000

Ans - 

# input has been taken for you
n=int(input())

#start writing your code from here
def equation(number): 

    l = -number
    r = 0
    while abs(l-r) > 10 ** -7 : 
        mid = (l+r)/2
        if mid > -number**mid: 
            r = mid
        else : 
            l = mid
    return round(mid,6)
    
print(format(equation(n),'.6f')) 

----------------------------------------------------------------------
Search in Valley
Description
This is another searching problem. The list given will have a valley trend. The valley_list is created by the following steps. A sorted list is randomly divided in two parts, not necessarily equal. The left part is then reversed and put back in place.

sorted_list: [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 15, 16, 17]

valley_list will be obtained by dividing this list at 13 and reversing the left half making it [13, 11, 8, 7, 6, 4, 3, 2, 1, 14, 15, 16, 17]. Find the index of the given integer key in the given valley_list.



Can you do better then Linear search? Hint: The correct answer does this search in O(log(n)) time where n is the size of the valley_list, just like rotated list question.


Input:

first-line will contain the valley_list and the second line will contain the element key whose index you have to find in the valley_list. No repetition of elements in the valley_list.



Output:

If key is present in the valley_list, print out its index.

If key is not present in the valley_list print -1


Sample input:

[13, 11, 8, 7, 6, 4, 3, 2, 1, 14, 15, 16, 17]

8

Sample output:

2

Sample input:

[13, 11, 8, 7, 6, 4, 3, 2, 1, 14, 15, 16, 17]

32



Sample output:

-1


Ans - 

#take input here
import ast
valley_list=ast.literal_eval(input())
key=int(input())

#start writing your code here
def valley_search(data, key):
    l=0
    r = len(data)-1
    while l<=r:
        mid = (l+r)//2
        if data[mid]==key:
            return mid 
        elif data[l] > data[mid]:
            if key>data[mid] and key<=data[l]:
                r = mid-1
            else:
                l=mid+1
        elif data[r] > data[mid]:
            if key<=data[r] and key>data[mid]:
                l = mid+1
            else:
                r=mid-1
        else: 
            return -1
                
    return -1
       
print(valley_search(valley_list, key))


----------------------------------------------------------------------
Arithematic Progression
Description
In mathematics, an arithmetic progression (AP) or arithmetic sequence is a sequence of numbers such that the difference between the consecutive terms is constant. The difference here means the second minus the first. For instance, sequence 5, 7, 9, 11, 13, 15, . . . is an arithmetic progression with common difference of 2.
Given any three terms of some random Arithematic progression and an integer key, you have to determine if the key will be present in the Arithematic sequence or no. check out sample input/output for more clarification.


Input:
The first line will contain three comma-separated integers representing three consecutive of some Arithmetic Progression
The second line will have the integer key

Output:
True if the key is a part of that AP, False otherwise


Sample input:
9, 11, 13
19

Sample output:
True

Ans - 

ap = input().strip()
lp = ap.split(',')
ap_list = [int(x) for x in lp]
term = int(input())
ap_list.sort()
p = ap_list[1]-ap_list[0]
rem = []
for i in ap_list:
    rem.append(i%p)
rem.append(term%p)
final = list(set(rem))
if len(final) == 1:
    print('True')
else:
    print('False')

----------------------------------------------------------------------
def func(x):
     return x % 10

L = [15, 20, 5, 29, 10]
sorted(L, key = func)

O/P - [20, 10, 15, 5, 29]


----------------------------------------------------------------------
Using the Built-in Sort Function
Description
Sort a list of strings according to their length, with the smallest string appearing first.
Hint: Use the appropriate ‘key’ in the sorted() function. If two strings are of the same length then their order — as in the original string — should be preserved.

Example:
Input 1:
[‘I’, ‘love’, ‘to’, ‘code’, ‘in’, ‘Python’]
Output 1:
[‘I’, ‘to’, ‘in’, ‘love’, ‘code’, ‘Python’]

Ans - 

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)

# Write your code here
def fun(x):
    return len(x)
    
print(sorted(input_list,key=fun))
----------------------------------------------------------------------
Custom Sort
Description
Sort a list of integers basis the remainder they leave when divided by 5 in an ascending order, i.e. the number that leaves a lower remainder when divided by 5 should come before the number which leaves a higher remainder.

Hint: Use the appropriate ‘key’ in the sorted() function. If two integers leave the same remainder then their order — as in the original list — should be preserved.

Examples:
Input 1:
[1, 9, 35, 12, 13, 21, 10]
Output 1:
[35, 10, 1, 21, 12, 13, 9]

Ans - 

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)

# Write your code here
def fun(x):
    return x%5
print(sorted(input_list,key=fun))


----------------------------------------------------------------------

Merge Sorted Lists
Description
Until now you have been doing problems with just one iterator. Now, let's add another dimension to our coding skills with a few problems where it will be easier and faster to do similar things with two iterators. You are given two sorted lists. You have to merge those such that the output is also sorted. Now, of course, you can merge and then use the sorted function. But that would be doing it in O(n*log(n)) Time and wheres the fun in that. Let's see if you can do it in O(n).


Input:
Two lines of input 
Each line will have a sorted list

Output:
Sorted merged list 


Sample input:
[1, 3, 5, 7, 9, 10]
[2, 3, 4, 5, 6, 8, 11, 12, 13]

Sample output:
[1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13]

Ans - 

#take input on your own
import ast 
list1 = ast.literal_eval(input())
list2 = ast.literal_eval(input())
#write code to find merged list
i,j = 0,0
result = []
while i<len(list1) and j < len(list2):
    if list1[i] < list2[j]:
        result.append(list1[i])
        i += 1 
    else:
        result.append(list2[j])
        j += 1 
final = result+ list1[i:]+list2[j:]
print(final)

------------------------------------------------------------------------
Specific sum
Description
Lets now raise the bar higher with this problem and drive home how amazing having more than one iterators can be.
You will be given a list and an integer k, you have to find two numbers from the list that add up to k

Input:
Two lines of input, the first line will have a sorted list of integers, the second list will have the number k

Output:
Two numbers from the list that add up to k


Sample input:
[1, 3, 5, 6, 10] 
15

Sample output:
5 10


Sample input:
[5, 6, 7, 10, 16, 17, 19]
24

Sample output:
7 17

Ans - 

import ast 
l = ast.literal_eval(input())
k = int(input())
#write your code here
while len(l) > 0:
    x = l.pop(0)
    rem = k - x
    if rem in l:
        print(x,rem)
        break
------------------------------------------------------------------------

# Given list of 0s and 1s
v = [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0]
n = len(v)
# Initialise two variables 'i' and 'j' to 1, indicating that they are currently pointing at the 
# first element in the list.
i = 0
j = 0

# Run a loop from 1 to the length of the list, with the variable 'i'
for i in range(n):
  
# If you encounter a zero, swap the values between v[i] & v[j] and increment 'j' as well. 'i'
# anyway gets incremented with every iteration of the loop. Think about it. This way, 'j' will
# always point at the first '1' that hasn't been sorted. Swapping the value of v[i]
# and v[j] will help replace the 1s with 0s that come after it. If v[j] is pointing at zero,
# swapping won't matter anyway.
    if(v[i] == 0):
        temp = v[j]
        v[j] = v[i]
        v[i] = temp
        j = j + 1

# Print the sorted list
print(v)
------------------------------------------------------------------------
Sort a vector of 0s, 1s, and 2s
Description
Write a code to sort a listof 0s, 1s, and 2s. Note that the time complexity should be O(n). 
Note: Do not use the built-in sorted() function.

Example:
Input 1:
[0, 2, 0, 0, 1, 1, 2, 0, 1]
Output 1:
[0, 0, 0, 0, 1, 1, 1, 2, 2]

Ans - 

# Read the input
import ast,sys
input_str = sys.stdin.read()
l = ast.literal_eval(input_str)

# Write your code here
i,j = 0,0
k = len(l) - 1
while i <= k: 
    if l[i] == 0: 
        l[j], l[i] = l[i], l[j] 
        j += 1
        i += 1
    elif l[i] == 1: 
        i = i + 1
    else: 
        l[i], l[k] = l[k], l[i]  
        k = k - 1
print(l)
------------------------------------------------------------------------
Diff K
Description
You have done the specific sum problem. Now it's time for a similar albeit slightly modified version of the same - Diff K. 

Given a list 'L' of sorted integers and another non-negative integer k, find if there exist 2 indices i and j such that L[i] - L[j] = k, i != j.

Format:
Input: A single sorted list in the first line and the non-negative integer 'k' in the second line.
Output: 'Yes' if there exist two such indices otherwise, 'No'.

Examples:
Input 1:
[1, 3, 5, 6, 10]
4
Output 1:
Yes

Input 2:
[1, 3, 5, 6, 10]
8
Output 2:
No

Ans - 

# Reading the input
import ast
l = ast.literal_eval(input())
k = int(input())

# Write your code here
def check_list(l,k):
    while len(l) > 0:
        if k ==0 :
            return 'No'
        x = l.pop(0)
        rem = k + x
        if rem in l:
            return 'Yes'
    return 'No'

print(check_list(l,k))
------------------------------------------------------------------------
Intersection of Sorted Arrays
Description
Find the intersection of two sorted lists, i.e., find the elements that occur in both.

Format:
Input: 2 sorted lists
Output: A single sorted list that contains the elements present in both the arrays.

Examples:
Input 1:
[1, 2, 3, 5, 9]
[3, 6, 9, 12]
Output 1:
[3, 9]

Input 2:
[1, 1, 2, 4, 8, 8, 8, 9]
[1, 2, 6, 7, 8, 8, 8]
Output 2:
[1, 2, 8, 8, 8]

Ans - 

# Reading the input
import ast 
input_lists = ast.literal_eval(input())
L1 = input_lists[0]
L2 = input_lists[1]

# Write your code here
final = []
i,j = 0,0
while i < len(L1) and j < len(L2):
    if L1[i] == L2[j]:
        final.append(L1[i])
        i += 1
        j += 1
    elif L1[i] > L2[j]:
        j += 1
    else:
        i +=1
print(final)

------------------------------------------------------------------------
Recursion Factorial
Description
Earlier you found factorial using loops. Here you have to apply the theory of recursive functions to find the factorial of a positive integer.

Input:
A positive integer num.

Output:
The value of num factorial, num!.

Note: 0!=1.
Sample input:
3

Sample output:
6


Ans - 

#take input here
num=int(input())

#write the recurssive function to find the factorial of num
def factorial(n):
    if n == 0:
        return 1
    else:
        num = n*factorial(n-1)
        n -= 1
        return num
#function ends here
print(factorial(num))

------------------------------------------------------------------------
Print numbers from -n to +n
Description
You’re given a positive number ‘n’ as an input. Write a recursive program to print all the numbers from -n to +n (including 0)
Example:
Input 1:
3
Output 1:
-3
-2
-1
0
1
2
3

Ans - 

n = int(input())

def echo(n):
    if n == 0:
        print(0)
    else:
        print(-n)
        echo(n-1)
        print(n)
echo(n)


------------------------------------------------------------------------
Recursive Fibonacci
Description
Earlier you found Fibonacci numbers using loops. In this question, let's try and find it by writing a recursive function. You will be given a positive integer n you have to find the nth Fibonacci number.

The Fibonacci series: 1, 1, 2, 3, 5, 8, 13, 21...

Input:
A positive integer n

Output:
The nth term in Fibonacci series.


Sample input:
2

Sample output:
1


Ans - 

#input taken here
n=int(input())

#write code for finding nth fibonacci number
def fibo(n):
    if n == 1  or n == 2:
        return 1
    else :
        return fibo(n-1)+fibo(n-2)

print(fibo(n))

------------------------------------------------------------------------
Weird Function
Description
In data science, quite often you need to implement research papers and write code according to what's present in those papers. Research papers have a lot of maths involved and you need to implement the maths in code. In this exercise, you're required to implement some maths in code. The problem is as follows:

For fixed integers a, b, c, define a weird function F(n) as follows: 
F(n) = n - c for all n > b 
F(n) = F(a + F(a + F(a + F(a + n)))) for all n ≤ b. 
 
Also, define S(a, b, c) = ∑F(n) where n takes the values 0 till b [in other words, S(a, b, c) = F(0) + F(1) + F(2) + .... F(b-1) + F(b)].

The input will be the value of a, b and c. The output should be S(a, b, c). You can define the functions in your own customized way with no restrictions on the number of parameters. For example, you can define the function S which can take additional parameters than a, b and c. Just make sure the code behaves as per the maths.
 
For example, if a = 20, b = 100 and c = 15, then F(0) = 195 and F(2000) = 1985. 
Therefore, S(20, 100, 15) = 14245


Input:
3 values separated by a comma
a,b,c

Output:
S(a,b,c)


Sample input:
20, 100, 15

Sample output:
14245


Ans - 

input_str = input()
input_list = input_str.split(',')

a = int(input_list[0])
b = int(input_list[1])
c = int(input_list[2])

# write code here
def Fn(n,a,b,c):
    if n > b:
        return n -c
    else :
        x = Fn((a + n),a,b,c)
        y = Fn((a + x),a,b,c)
        z = Fn((a + y),a,b,c)
        return Fn((a + z),a,b,c)
        
        
def large_sum(a,b,c):
    large_sum = 0
    for i in range(b+1):
        large_sum += Fn(i, a, b, c)
    return large_sum
        


# store the result in the following variable
result = large_sum(a, b, c)

# print result -- do not change the following code
print(result)


------------------------------------------------------------------------
Recursive Pattern
Description
Given a positive integer 'n' and another positive integer 'k' (<n),  print the following pattern using recursion.

Example:
Input 1: n = 12, k = 5
Output 2: 12, 7, 2, -3, 2, 7, 12

Input 2: n = 10, k =2
Output 2: 10, 8, 6, 4, 2, 0, 2, 4, 6, 8, 10

Basically, you need to keep decrementing the given value of 'n' by 'k' until you encounter 0 or a negative number, in which case, you need to start incrementing by 'k' until you reach 'n' again.

Format:
Input: The first line contains the positive integer 'n'. The second line contains the positive integer 'k'.
Output: The required pattern as comma-separated-values as shown in the examples above.

Ans -

# Reading the inputs
n = int(input())
k = int(input())

# Function
l = []
def pattern(u,v):
    global l
    if u<=0:
        l.append(u)
    else:
        l.append(u)
        pattern(u-v,v)
        l.append(u)
            
pattern(n,k)
print (", ".join("{0}".format(n) for n in l))

------------------------------------------------------------------------

------------------------------------------------------------------------
------------------------------------------------------------------------

------------------------------------------------------------------------

------------------------------------------------------------------------
